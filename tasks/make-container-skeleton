#!/usr/bin/env node
/* vim: set filetype=javascript: */
/* eslint-disable */
const fs = require("fs");
const path = require("path");
const glob = require("glob");
const minimist = require("minimist");
const mkdirp = require("mkdirp");
const chalk = require("chalk");
const clear = require("cli-clear");
const constants = require("./constants/");
const log = require("./utils/log");
const skeletons = require("./skeletons/");

const help = () => {
  console.log(`Make container component skeleton

${chalk.yellow("Usage:")}
    $ ./tasks/make-container-skeleton <type> <component>

${chalk.yellow("Arguments:")}
    type              Type of container.
                        - page
                        - ui
    component         Component name.

${chalk.yellow("Options:")}
    -h, --help        Show this message

${chalk.yellow("Example:")}
    $ ./tasks/make-container-skeleton page AboutPage
    $ ./tasks/make-container-skeleton ui PostForm
`);
  process.exit();
};


clear();

const argv = minimist(process.argv.slice(2), {
  boolean: "help",
  alias: { h: "help" }
});

if (argv.help) help();
if (argv._.length !== 2) {
  log.error(`Invalid arguments`, false);
  help();
}

const [type, name] = argv._;
if (type !== "page" && type !== "ui") {
  log.error(`Invalid arguments`, false);
  help();
}

const rootPath = `${constants.basePath}/containers`;
const basePath = `${rootPath}/${type === "page" ? "pages" : type}/${name}`;
const skeletonComponent = type === "page" ? skeletons.containerPage : skeletons.containerUI;
const files = {
  [`${basePath}/${name}.js`] : skeletonComponent(name),
  [`${basePath}/${name}.css`]: skeletons.css(name)
};

mkdirp.sync(basePath);

Object.keys(files).forEach(path => {
  if (!fs.existsSync(path)) {
    fs.writeFileSync(path, files[path]);
  }
});


const result = Object.keys(files).join("\n");
log.success(`Maked ${name} component`, result);
